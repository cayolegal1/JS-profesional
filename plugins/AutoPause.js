class AutoPause {

    constructor(){

        this.threshold = 0.25

        //apuntamos a que el this del metodo de nuestra clase AutoPause apunte hacia el mismo mÃ©todo
        this.handleIntersection = this.handleIntersection.bind(this)
    } 

    run(player){

        //guardamos el player en una instancia de la clase, es decir, para poder ejecutar sus mÃ©todos, ya que el player en si en nuestro src MediaPlayer.js es el media, y media es el video
        this.player = player


        //IntersectionObserver recibe un callback (funcion), y un objeto de configuraciÃ³n, un theshold apunta al porcentaje del target, es decir, cuando hagamos scroll y llegue o pase al 25% del target, se ejecutarÃ¡ el callback, el target en este caso esta en la linea 22, this.player.media, que es el video en si, o sea todo este callback y la configuraciÃ³n apuntan al elemento que definamos en el mÃ©todo observe, que como su nombre lo dice, se quedarÃ¡ observando dicho elemento para ejecutar el callback cuando llegue al threshold
        const observer = new IntersectionObserver(this.handleIntersection, {

            threshold: this.threshold
        })

        observer.observe(this.player.media)
    }


    //callback
    handleIntersection(entries) {  


        //el entry tiene varios elementos, o objetos, pero a nosotros solo nos interesa el primer objeto
        const entry = entries[0]
        console.log(entry)
        console.log(entry.intersectionRatio)

        //determinamos si la intersecciÃ³n esta pasando o es igual al threshold
        const isVisible = entry.intersectionRatio >= this.threshold

        if(isVisible) {

            this.player.play()

        } else {

            this.player.pause()

        }
     }
} 

// observe: es un metodo de la â€˜claseâ€™ intersectionObjerver que nos permite aplicar nuestro objeto configurado a un elemento. Entonces todo lo que configuramos al asignar new IntersectionObserver lo aplicamos en el elementoAObservar.
// Otra manera de explicarlo serÃ­a decir que es como un listener configurado para escuchar el margen observado del elementoAObservar.
// const observador = new IntersectionObserver(callback, options)

// observador.observe(elementoAObservar)
// callback: al igual que un eventListener que manda un callback al ejecutarse, pero esta funcion en particular recibe un prop( entries) por ser del tipo intersectionObjerver el objeto donde es invocada.

// entries: es el objeto recibido cada que el elementoAObservar es observado, puedes hacerle un console.log(entries) y veras que dentro contiene dos objetos, bno, solo el primero vienen los parametros de observaciÃ³n, es por esto que en la segunda linea solo obtenemos este primer objeto con const entry = entries[0].

// intersectionRatio: es uno de los parametros obtenidos en el objeto al interceptarlo, tomese interceptar como activar el â€˜listenerâ€™ o el â€˜metodo observeâ€™. Este nos dice quÃ© porcentaje del elemento estÃ¡ a la vista, por lo que pormedio de el podemos verificar si el elementoAObservar estÃ¡ visible o no. ðŸ¤¯


export default AutoPause;